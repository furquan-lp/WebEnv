{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TopBar from \"./components/TopBar\";\nimport AboutModal from \"./components/AboutModal\";\nimport Cards from \"./components/Cards\";\nimport CircularLoading from \"./components/CircularLoading\";\nimport ConnectText from \"./components/ConnectText\";\nimport EnvChart from \"./components/EnvChart\";\nimport ChartToggle from \"./components/ChartToggle\";\nimport URLField from \"./components/URLBar\";\nimport { colors0, colors1 } from \"./components/ComponentStyles\";\nimport utils from \"./services/WEUtils\";\nimport envmon from \"./services/envmon\";\nimport bgImage from \"./assets/background.jpg\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar style = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  webWrapper: {\n    flex: 1,\n    height: 720,\n    width: 480,\n    alignSelf: 'center'\n  },\n  bgImage: {\n    flex: 1\n  }\n});\n\nvar ShowCards = function ShowCards(_ref) {\n  var env = _ref.env;\n\n  if (env.length === 0 || env === undefined) {\n    return _jsx(CircularLoading, {});\n  } else {\n    return _jsx(Cards, {\n      temperature: env[0].envdata.temp,\n      humidity: env[0].envdata.humidity\n    });\n  }\n};\n\nvar WebEnv = function WebEnv() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      visible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      chartType = _useState4[0],\n      setChartType = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      env = _useState6[0],\n      setEnv = _useState6[1];\n\n  var _useState7 = useState({\n    labels: [-1],\n    data: [0.0]\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      chartData = _useState8[0],\n      setChartData = _useState8[1];\n\n  var _useState9 = useState('http://envmon.local/'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      URL = _useState10[0],\n      setURL = _useState10[1];\n\n  useEffect(function () {\n    setTimeout(function () {\n      envmon.getAll('http://192.168.43.126/').then(function (data) {\n        return setEnv(data);\n      });\n    }, 2000);\n  }, [env]);\n  useEffect(function () {\n    if (env.length !== 0 && env !== undefined) {\n      var newChart = chartData.labels[0] === -1 ? {\n        labels: [],\n        data: []\n      } : _objectSpread({}, chartData);\n\n      if (chartData.data.length >= 5) {\n        newChart.data.shift();\n        newChart.labels.shift();\n      }\n\n      newChart.data.push(Number(chartType === 0 ? env[0].envdata.temp : env[0].envdata.humidity));\n      newChart.labels.push(env[0].uptime.hours + ':' + env[0].uptime.minutes + ':' + env[0].uptime.seconds);\n      setChartData(newChart);\n    }\n  }, [env]);\n  useEffect(function () {\n    var blankChart = {\n      labels: [],\n      data: []\n    };\n    setChartData(blankChart);\n  }, [chartType]);\n  return _jsx(ImageBackground, {\n    source: bgImage,\n    style: style.bgImage,\n    children: _jsxs(View, {\n      style: style.container,\n      children: [_jsx(StatusBar, {\n        animated: true,\n        backgroundColor: colors0.blued,\n        hidden: false\n      }), _jsx(TopBar, {\n        aboutButton: function aboutButton() {\n          return setModalVisible(true);\n        }\n      }), visible ? _jsx(AboutModal, {\n        visible: visible,\n        setModalVisible: setModalVisible\n      }) : null, _jsx(ShowCards, {\n        env: env\n      }), _jsx(ChartToggle, {\n        chartType: chartType,\n        setChartType: setChartType\n      }), _jsx(URLField, {\n        URL: URL,\n        setURL: setURL\n      })]\n    })\n  });\n};\n\nvar App = function App() {\n  if (utils.isWeb()) {\n    return _jsx(ImageBackground, {\n      source: bgImage,\n      style: style.bgImage,\n      blurRadius: 10,\n      children: _jsx(View, {\n        style: style.webWrapper,\n        children: _jsx(WebEnv, {})\n      })\n    });\n  } else {\n    return _jsx(WebEnv, {});\n  }\n};\n\nexport default App;","map":{"version":3,"sources":["/home/syed/Code/envmon-web/WebEnv/App.js"],"names":["useState","useEffect","TopBar","AboutModal","Cards","CircularLoading","ConnectText","EnvChart","ChartToggle","URLField","colors0","colors1","utils","envmon","bgImage","style","StyleSheet","create","container","flex","webWrapper","height","width","alignSelf","ShowCards","env","length","undefined","envdata","temp","humidity","WebEnv","visible","setModalVisible","chartType","setChartType","setEnv","labels","data","chartData","setChartData","URL","setURL","setTimeout","getAll","then","newChart","shift","push","Number","uptime","hours","minutes","seconds","blankChart","blued","App","isWeb"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react';\nimport { View, StatusBar, ImageBackground, ToastAndroid } from 'react-native';\nimport { StyleSheet } from 'react-native';\n\nimport TopBar from './components/TopBar';\nimport AboutModal from './components/AboutModal';\nimport Cards from './components/Cards';\nimport CircularLoading from './components/CircularLoading';\nimport ConnectText from './components/ConnectText';\nimport EnvChart from './components/EnvChart';\nimport ChartToggle from './components/ChartToggle';\nimport URLField from './components/URLBar';\nimport { colors0, colors1 } from './components/ComponentStyles';\n\nimport utils from './services/WEUtils';\nimport envmon from './services/envmon';\n\nimport bgImage from './assets/background.jpg';\n\nconst style = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  webWrapper: {\n    flex: 1,\n    height: 720,\n    width: 480,\n    alignSelf: 'center'\n  },\n  bgImage: {\n    flex: 1\n  }\n});\n\nconst ShowCards = ({ env }) => {\n  if (env.length === 0 || env === undefined) {\n    return (\n      <CircularLoading />\n    );\n  } else {\n    return (\n      <Cards temperature={env[0].envdata.temp}\n        humidity={env[0].envdata.humidity} />\n    );\n  }\n}\n\nconst WebEnv = () => {\n  const [visible, setModalVisible] = useState(false);\n  const [chartType, setChartType] = useState(0);\n  const [env, setEnv] = useState([]);\n  const [chartData, setChartData] = useState({ labels: [-1], data: [0.0] });\n  const [URL, setURL] = useState('http://envmon.local/');\n\n  useEffect(() => {\n    setTimeout(() => {\n      envmon\n        .getAll('http://192.168.43.126/')\n        .then(data => setEnv(data));\n    }, 2000);\n  }, [env]);\n\n  useEffect(() => {\n    if (env.length !== 0 && env !== undefined) {\n      let newChart = chartData.labels[0] === -1 ? { labels: [], data: [] } : { ...chartData };\n      if (chartData.data.length >= 5) {\n        newChart.data.shift();\n        newChart.labels.shift();\n      }\n      newChart.data.push(Number(chartType === 0 ? env[0].envdata.temp : env[0].envdata.humidity));\n      newChart.labels.push(\n        env[0].uptime.hours + ':' + env[0].uptime.minutes + ':' + env[0].uptime.seconds);\n      setChartData(newChart);\n    }\n  }, [env]);\n\n  useEffect(() => {\n    const blankChart = { labels: [], data: [] };\n    setChartData(blankChart);\n  }, [chartType]);\n\n  return (\n    <ImageBackground source={bgImage}\n      style={style.bgImage}>\n      <View style={style.container}>\n        <StatusBar\n          animated={true}\n          backgroundColor={colors0.blued}\n          hidden={false} />\n        <TopBar aboutButton={() => setModalVisible(true)} />\n        {visible ? <AboutModal visible={visible} setModalVisible={setModalVisible} /> : null}\n        <ShowCards env={env} />\n        <ChartToggle chartType={chartType} setChartType={setChartType} />\n        <URLField URL={URL} setURL={setURL} />\n      </View>\n    </ImageBackground>\n  );\n};\n\nconst App = () => {\n  if (utils.isWeb()) {\n    return (\n      <ImageBackground source={bgImage}\n        style={style.bgImage}\n        blurRadius={10}>\n        <View style={style.webWrapper}>\n          <WebEnv />\n        </View>\n      </ImageBackground >\n    );\n  } else {\n    return (<WebEnv />);\n  }\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}